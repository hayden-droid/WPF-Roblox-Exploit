using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Shapes;
using ICSharpCode.AvalonEdit;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Documents;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.IO;
using System.Xml;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using ICSharpCode.AvalonEdit.Highlighting;
using Microsoft.Win32;
using System.Windows.Media.Animation;
using System.Net;
using System.Windows.Automation.Peers;
using System.Diagnostics;

namespace XFORCEv2
{
    /// <summary>
    /// Lógica de interacción para Executor.xaml
    /// </summary>
    public partial class Executor : Window
    {
        private TextEditor current;
        public static Executor Instance;
        public TextEditor GetCurrent()
        {
            if (this.EditorTabs.SelectedIndex == -1)
            {
                return this.current = null;
            }
            return this.current = (this.EditorTabs.SelectedContent as TextEditor);
        }
        public Executor()
        {
        Executor.Instance = this;
            InitializeComponent();
            this.EditorTabs.Loaded += delegate (object s, RoutedEventArgs f)
            {
                this.EditorTabs.GetTemplateChild<Button>("AddTabButton").Click += delegate (object e, RoutedEventArgs x)
                {
                    this.MakeTab();
                };
            };
            StreamReader streamxd =
new StreamReader(@"bin\Lua.xshd");
            {
                using (XmlTextReader reader = new XmlTextReader(streamxd))
                {
                    Output.SyntaxHighlighting =
                        HighlightingLoader.Load(
                        reader,
                        HighlightingManager.Instance);
                }
            }
            this.MakeTab();
            this.tabEditWindow = new tabeditwindow(this.EditorTabs);
            this.OutputTab.Tag = true;
            Functions.ListBox(this.ScriptBox, "./scripts", "*.txt");
            Functions.ListBox(this.ScriptBox, "./scripts", "*.lua");
        }
        private void CloseWindows()
        {
            this.tabEditWindow.Close();
        }
        private void MoveTab(object sender, MouseEventArgs e)
        {
            TabItem tabItem = e.Source as TabItem;
            if (tabItem == null)
            {
                return;
            }
            if (Mouse.PrimaryDevice.LeftButton == MouseButtonState.Pressed)
            {
                if (VisualTreeHelper.HitTest(tabItem, Mouse.GetPosition(tabItem)).VisualHit is Button)
                {
                    return;
                }
                DragDrop.DoDragDrop(tabItem, tabItem, DragDropEffects.Move);
            }
        }
        private void DropTab(object sender, DragEventArgs e)
        {
            TabItem tabItem = e.Source as TabItem;
            if (tabItem != null)
            {
                TabItem tabItem2 = e.Data.GetData(typeof(TabItem)) as TabItem;
                if (tabItem2 != null)
                {
                    if (!tabItem.Equals(tabItem2))
                    {
                        TabControl tabControl = tabItem.Parent as TabControl;
                        int insertIndex = tabControl.Items.IndexOf(tabItem2);
                        int num = tabControl.Items.IndexOf(tabItem);
                        tabControl.Items.Remove(tabItem2);
                        tabControl.Items.Insert(num, tabItem2);
                        tabControl.Items.Remove(tabItem);
                        tabControl.Items.Insert(insertIndex, tabItem);
                        tabControl.SelectedIndex = num;
                    }
                    return;
                }
            }
        }
        public TabItem MakeTab(string text = "", string title = "New Tab")
        {
            bool loaded = false;
            TextEditor textEditor = Executor.MakeEditor();
            textEditor.Text = text;
            TextBox tbox = new TextBox
            {

                Text = "New Tab " + EditorTabs.Items.Count,
                IsEnabled = false,
                TextWrapping = TextWrapping.NoWrap,
                IsHitTestVisible = false,
                Style = (base.TryFindResource("InvisibleTextBox") as Style)
            };
            TabItem tab = new TabItem
            {
                Content = textEditor,
                Style = (base.TryFindResource("Tab") as Style),
                Header = tbox,
                AllowDrop = true
            };
            tab.Loaded += delegate (object s, RoutedEventArgs f)
            {
                if (loaded)
                {
                    return;
                }
                tab.GetTemplateChild<Button>("CloseButton").Click += delegate (object d, RoutedEventArgs x)
                {
                    this.EditorTabs.Items.Remove(tab);
                };
                loaded = true;
            };
            tab.MouseDown += delegate (object sender, MouseButtonEventArgs e)
            {
                if (e.OriginalSource is Border)
                {
                    if (e.MiddleButton == MouseButtonState.Pressed)
                    {
                        this.EditorTabs.Items.Remove(tab);
                        return;
                    }
                    if (e.RightButton == MouseButtonState.Pressed)
                    {
                        this.tabEditWindow.Left = e.GetPosition(null).X - 12.0 + this.Left;
                        this.tabEditWindow.Top = e.GetPosition(null).Y - 12.0 + this.Top;
                        this.tabEditWindow.Show(tab);
                    }
                }
            };

            string oldHeader = title;
            tbox.GotFocus += delegate (object s, RoutedEventArgs f)
            {
                oldHeader = tbox.Text;
                tbox.CaretIndex = tbox.Text.Length - 0;
            };
            tbox.KeyDown += delegate (object s, KeyEventArgs e)
            {
                Key key = e.Key;
                if (key != Key.Return)
                {
                    if (key != Key.Escape)
                    {
                        return;
                    }
                    tbox.Text = oldHeader;
                }
                tbox.IsEnabled = false;
            };
            tbox.LostFocus += delegate (object s, RoutedEventArgs f)
            {
                tbox.IsEnabled = false;
            };
            this.EditorTabs.SelectedIndex = this.EditorTabs.Items.Add(tab);
            return tab;
        }
        public static TextEditor MakeEditor()
        {
            TextEditor textEditor = new TextEditor
            {
                ShowLineNumbers = true,
                Background = new SolidColorBrush(Color.FromRgb(24, 24, 24)),
                Foreground = new SolidColorBrush(Color.FromRgb(247, 241, byte.MaxValue)),
                LineNumbersForeground = Brushes.LightGray,
                Margin = new Thickness(0.0, 0.0, 2.0, 2.0),
                FontFamily = new FontFamily("Consolas"),
            };

            textEditor.Options.EnableEmailHyperlinks = false;
            textEditor.Options.EnableHyperlinks = false;
            textEditor.Options.AllowScrollBelowDocument = true;
            Line line = new Line
            {
                X1 = 0.0,
                Y1 = 0.0,
                X2 = 0.0,
                Y2 = 1.0,
                Stretch = Stretch.Fill,
                StrokeThickness = 1.0,
                Margin = new Thickness(2.0, 0.0, 6.0, 0.0),
                Tag = new object()
            };
            StreamReader s =
    new StreamReader(@"bin\Lua.xshd");
            {
                using (XmlTextReader reader = new XmlTextReader(s))
                {
                    textEditor.SyntaxHighlighting =
                        HighlightingLoader.Load(
                        reader,
                        HighlightingManager.Instance);
                }
            }
            line.SetBinding(Shape.StrokeProperty, new Binding("LineNumbersForeground")
            {
                Source = textEditor
            });
            return textEditor;
        }
        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void Minimize_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void MoveWindow_MouseDown(object sender, MouseButtonEventArgs e)
        {
            this.DragMove();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
           
        }
        private readonly tabeditwindow tabEditWindow;

        private void Configuration(object sender, RoutedEventArgs e)
        {
            Configuration configuration = new Configuration();
            configuration.Show();
        }

        private void TextBlock_MouseDown(object sender, MouseButtonEventArgs e)
        {
            MessageBox.Show("XFORCE By monobrasil and AITOR911", "XFORCE");
        }

        private void ScriptHub(object sender, RoutedEventArgs e)
        {
            ScriptHub scriptHub = new ScriptHub();
            scriptHub.Show();
        }

        private void ScriptBox_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

        }

        private void LoadScript(object sender, MouseButtonEventArgs e)
        {
            string gay = File.ReadAllText("scripts\\" + this.ScriptBox.SelectedItem.ToString());
            bool flag = this.ScriptBox.SelectedItem != null;
            if (flag)
            {
                TextEditor TtextEditor = this.GetCurrent();
                if (this.GetCurrent() == null)
                {
                    return;
                }
                this.current.Text = gay;
                if (TtextEditor == null)
                {
                    return;
                }
            }
            ScriptBox.Items.Clear();
            TextEditor textEditor = this.GetCurrent();
            Functions.ListBox(this.ScriptBox, "./scripts", "*.txt");
            Functions.ListBox(this.ScriptBox, "./scripts", "*.lua");
        }


        private void ClearEditor(object sender, RoutedEventArgs e)
        {
            if (this.GetCurrent() == null)
            {
                return;
            }
            this.current.Text = "";
        }

        private void Open(object sender, RoutedEventArgs e)
        {
            TextEditor textEditor = this.GetCurrent();
            if (textEditor == null)
            {
                return;
            }
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Title = "Open File",
                CheckFileExists = true,
                Multiselect = false,
                DefaultExt = ".txt",
                Filter = "Scripts (*.lua; *.txt)|*.lua;*.txt|All Files (*.*)|*.*"
            };
            bool? flag = openFileDialog.ShowDialog();
            bool flag2 = true;
            if (flag.GetValueOrDefault() == flag2 & flag != null)
            {
                textEditor.Text = File.ReadAllText(openFileDialog.FileName);
                ((textEditor.Parent as TabItem).Header as TextBox).Text = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);
            }
        }

        private void Save(object sender, RoutedEventArgs e)
        {
            TextEditor textEditor = this.GetCurrent();
            if (textEditor == null)
            {
                return;
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Title = "Save File",
                DefaultExt = ".txt",
                Filter = "Scripts (*.lua; *.txt)|*.lua;*.txt|All Files (*.*)|*.*"
            };
            bool? flag = saveFileDialog.ShowDialog();
            bool flag2 = true;
            if (flag.GetValueOrDefault() == flag2 & flag != null)
            {
                File.WriteAllText(saveFileDialog.FileName, textEditor.Text);
                TextBox textBox = (textEditor.Parent as TabItem).Header as TextBox;
                    textBox.Text = System.IO.Path.GetFileNameWithoutExtension(saveFileDialog.FileName);
            }
        }

        private void Discord(object sender, RoutedEventArgs e)
        {
            Process.Start("https://discord.gg/HTw5wJyQDb");
        }
    }
}
